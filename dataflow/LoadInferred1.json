{
	"name": "LoadInferred1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesDataDS",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CustomerDimSF",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Fact_InvoiceSF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DimCustomerSF",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Fact_InvoiceSF",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          invoiceId as string,",
				"          customerid as string,",
				"          invoiceDate as string,",
				"          ShipTo as string,",
				"          ShipTo_City as string,",
				"          ShipTo_Country as string,",
				"          SalespersonPersonID as string,",
				"          SalespersonName as string,",
				"          total_product_cnt as string,",
				"          Total as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          CUSTOMER_SK as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATED_DT as timestamp,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"source1, source2 lookup(customerid == toString(CUSTOMER_ID),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(!isNull(CUSTOMER_SK),",
				"     isNull(CUSTOMER_SK),",
				"     disjoint: false) ~> split1@(MatchedRows, UnMatchedRows)",
				"split1@UnMatchedRows derive(Cust_SK = -1,",
				"          CUSTOMER_NAME = 'UNKNOWN',",
				"          DI_CREATED_DT = currentDate(),",
				"          PID = 'InitialLoad',",
				"          CUSTOMER_ID = toInteger(0)) ~> derivedColumn1",
				"split1@MatchedRows derive(PID = 'InitialLoad',",
				"          DI_CREATED_DT = currentDate()) ~> derivedColumn2",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICE_SK as decimal(38,0),",
				"          INVOICE_ID as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          INVOICE_DT as date,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL_PRODUCT_COST as double,",
				"          DI_CREATED_DT as timestamp,",
				"          PID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_SK = CUSTOMER_SK,",
				"          INVOICE_ID = invoiceId,",
				"          CUSTOMER_ID,",
				"          INVOICE_DT = invoiceDate,",
				"          TOTAL_PRODUCT_CNT = total_product_cnt,",
				"          TOTAL_PRODUCT_COST = Total,",
				"          DI_CREATED_DT,",
				"          PID",
				"     )) ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_SK as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATED_DT as timestamp,",
				"          PID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CUSTOMER_SK = Cust_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          DI_CREATED_DT,",
				"          PID",
				"     )) ~> sink2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICE_SK as decimal(38,0),",
				"          INVOICE_ID as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          INVOICE_DT as date,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL_PRODUCT_COST as double,",
				"          DI_CREATED_DT as timestamp,",
				"          PID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_SK = Cust_SK,",
				"          INVOICE_ID = invoiceId,",
				"          CUSTOMER_ID,",
				"          INVOICE_DT = invoiceDate,",
				"          TOTAL_PRODUCT_CNT = total_product_cnt,",
				"          TOTAL_PRODUCT_COST = Total,",
				"          DI_CREATED_DT,",
				"          PID",
				"     )) ~> sink3"
			]
		}
	}
}