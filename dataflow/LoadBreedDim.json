{
	"name": "LoadBreedDim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SeattleSFStage",
						"type": "DatasetReference"
					},
					"name": "SourceSeattleStage"
				},
				{
					"dataset": {
						"referenceName": "ds_SF_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "BreedDimMaxID"
				},
				{
					"dataset": {
						"referenceName": "ds_SF_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_SF_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sinkBreedDim"
				}
			],
			"transformations": [
				{
					"name": "SourceDataWithSK",
					"description": "Custom (Cross) join on 'sourcestg' and 'BreedDimMaxId'"
				},
				{
					"name": "aggregateBreedKeys",
					"description": "Aggregating data by primary_breed,secondary_breed,species columns"
				},
				{
					"name": "joinTarget"
				},
				{
					"name": "filterExistingRows",
					"description": "Filtering rows using expression on columns primary_breed"
				},
				{
					"name": "surrogateKey",
					"description": "Adding new key RowNum starting from 1 with step 1"
				},
				{
					"name": "DerivedColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"59\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceSeattleStage",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK),0) AS MaxBreedSK FROM TEMP_SCHEMA.BREED_DIM',",
				"     format: 'query') ~> BreedDimMaxID",
				"source(output(",
				"          BREED_SK as decimal(10,0),",
				"          START_DT as date,",
				"          END_DT as date,",
				"          IS_CURRENT as decimal(10,0),",
				"          BREED_DK as decimal(10,0),",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"SourceSeattleStage, BreedDimMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SourceDataWithSK",
				"SourceDataWithSK aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count({LICENSE_NUMBER})) ~> aggregateBreedKeys",
				"aggregateBreedKeys, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTarget",
				"joinTarget filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filterExistingRows",
				"filterExistingRows keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(BREED_SK = MAXBREEDSK + RowNum,",
				"          DI_CREATED_DT = currentTimestamp(),",
				"          DI_JOB_ID = uuid()) ~> DerivedColumns",
				"DerivedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          Breed_Sk = BREED_SK,",
				"          Species_Name = SPECIES,",
				"          Primary_Breed_Name = PRIMARY_BREED,",
				"          Secondary_Breed_Name = SECONDARY_BREED,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_CREATED_DT",
				"     )) ~> sinkBreedDim"
			]
		}
	}
}